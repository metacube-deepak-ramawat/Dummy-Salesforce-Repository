name: Salesforce Authentication and Test Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  auth-and-test-salesforce:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Salesforce CLI (@salesforce/cli)
        run: npm install --global @salesforce/cli

      - name: Install jq (JSON processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Write JWT Key from Secret
        run: echo "${{ secrets.SF_JWT_KEY }}" > server.key

      - name: Authenticate to Salesforce using JWT
        run: sf org login jwt --client-id "${{ secrets.SF_CLIENT_ID }}" --jwt-key-file server.key --username "${{ secrets.SF_USERNAME }}" --instance-url "${{ secrets.SF_ORG_URL }}" --set-default --alias my-org

      - name: Confirm authentication
        run: sf org list

      - name: Debug - Show project structure
        run: |
          echo "=== PROJECT STRUCTURE ==="
          find . -name "*.cls" -o -name "*.trigger" -o -name "*.xml" | head -20
          echo ""
          echo "=== SFDX PROJECT JSON ==="
          cat sfdx-project.json || echo "No sfdx-project.json found"
          echo ""

      - name: Create test-results directory
        run: mkdir -p test-results

      - name: Validate deployment with tests and enhanced error capture
        run: |
          echo "Starting deployment validation..."
          sf project deploy start \
            --dry-run \
            --wait 20 \
            --target-org my-org \
            --ignore-conflicts \
            --test-level RunLocalTests \
            --verbose \
            --json > test-results/deploy-validation.json 2>&1 || true
          
          echo "Deployment validation command completed with exit code: $?"
      
      - name: Debug - Show deployment validation result
        run: |
          echo "=== RAW DEPLOYMENT VALIDATION RESULT ==="
          cat test-results/deploy-validation.json
          echo ""
          echo "=== FILE SIZE AND TYPE ==="
          ls -la test-results/deploy-validation.json
          echo ""

      - name: Enhanced error detection and analysis
        run: |
          echo "=== ENHANCED DEPLOYMENT ANALYSIS ==="
          
          # Check if the JSON file is valid
          if ! jq empty test-results/deploy-validation.json 2>/dev/null; then
            echo "❌ ERROR: Invalid JSON in deployment result"
            echo "Raw content:"
            cat test-results/deploy-validation.json
            exit 1
          fi
          
          # Extract basic deployment info
          deploySuccess=$(jq -r '.result.success // false' test-results/deploy-validation.json)
          deployDone=$(jq -r '.result.done // false' test-results/deploy-validation.json)
          deployId=$(jq -r '.result.id // "N/A"' test-results/deploy-validation.json)
          deployStatus=$(jq -r '.result.status // "Unknown"' test-results/deploy-validation.json)
          numErrors=$(jq -r '.result.numberComponentErrors // 0' test-results/deploy-validation.json)
          numDeployed=$(jq -r '.result.numberComponentsDeployed // 0' test-results/deploy-validation.json)
          numTotal=$(jq -r '.result.numberComponentsTotal // 0' test-results/deploy-validation.json)
          
          echo "Deployment ID: $deployId"
          echo "Deployment Status: $deployStatus"
          echo "Deployment Done: $deployDone"
          echo "Deployment Success: $deploySuccess"
          echo "Components: $numDeployed/$numTotal deployed, $numErrors errors"
          
          # Check for component failures (compilation errors)
          componentFailures=$(jq '.result.details.componentFailures // []' test-results/deploy-validation.json)
          numComponentFailures=$(echo "$componentFailures" | jq 'length')
          
          echo "Component failures count: $numComponentFailures"
          
          if [ "$numComponentFailures" -gt 0 ]; then
            echo ""
            echo "=== 🚨 COMPONENT FAILURES (Compilation Errors) ==="
            jq -r '.result.details.componentFailures[]? | 
              "❌ Component: " + .fullName + " (" + .componentType + ")" +
              "\n   📁 File: " + .fileName + 
              "\n   🐛 Problem: " + .problem + 
              "\n   📊 Problem Type: " + .problemType +
              (if .lineNumber then "\n   📍 Line: " + (.lineNumber | tostring) else "" end) +
              (if .columnNumber then "\n   📍 Column: " + (.columnNumber | tostring) else "" end) +
              "\n"' test-results/deploy-validation.json
            
            echo "=== 🔧 QUICK FIX SUGGESTIONS ==="
            jq -r '.result.details.componentFailures[]? | 
              if (.problem | contains("deprecated")) then
                "🔹 " + .fullName + ": Remove @deprecated annotation or use comments instead"
              elif (.problem | contains("duplicate")) then
                "🔹 " + .fullName + ": Check for duplicate method/variable names"
              elif (.problem | contains("Invalid type")) then
                "🔹 " + .fullName + ": Check data types and imports"
              elif (.problem | contains("Method does not exist")) then
                "🔹 " + .fullName + ": Check method names and parameters"
              else
                "🔹 " + .fullName + ": Check syntax and references"
              end' test-results/deploy-validation.json
          fi
          
          # Check for test results
          if jq -e '.result.details.runTestResult' test-results/deploy-validation.json >/dev/null; then
            numFailures=$(jq '.result.details.runTestResult.numFailures // 0' test-results/deploy-validation.json)
            numTestsRun=$(jq '.result.details.runTestResult.numTestsRun // 0' test-results/deploy-validation.json)
            totalTime=$(jq -r '.result.details.runTestResult.totalTime // "N/A"' test-results/deploy-validation.json)
            
            echo ""
            echo "=== TEST EXECUTION SUMMARY ==="
            echo "Tests run: $numTestsRun"
            echo "Test failures: $numFailures"
            echo "Total time: $totalTime"
            
            if [ "$numFailures" -gt 0 ]; then
              echo ""
              echo "=== FAILED TESTS ==="
              jq -r '.result.details.runTestResult.failures[]? | 
                "❌ Test: " + .name + 
                "\n   Class: " + (.namespace // "") + "." + .name + 
                "\n   Method: " + (.methodName // "N/A") +
                "\n   Message: " + .message + 
                "\n   Stack Trace: " + (.stackTrace // "N/A") + 
                "\n"' test-results/deploy-validation.json
            fi
          else
            echo ""
            echo "⚠️  No test results found - this usually means compilation failed"
          fi
          
          # Check for general deployment errors
          if jq -e '.result.details.componentSuccesses' test-results/deploy-validation.json >/dev/null; then
            numSuccesses=$(jq '.result.details.componentSuccesses | length' test-results/deploy-validation.json)
            echo ""
            echo "=== DEPLOYMENT SUMMARY ==="
            echo "Components successfully validated: $numSuccesses"
          fi
          
          # Look for any error messages in the result
          errorMsg=$(jq -r '.message // .error.message // empty' test-results/deploy-validation.json)
          if [ ! -z "$errorMsg" ]; then
            echo ""
            echo "=== ERROR MESSAGE ==="
            echo "$errorMsg"
          fi
          
          # Check deployment status more thoroughly
          if [ "$deploySuccess" != "true" ]; then
            echo ""
            echo "🚨 DEPLOYMENT VALIDATION FAILED"
            echo "This usually means one of the following:"
            echo "1. Compilation errors in Apex classes or triggers"
            echo "2. Missing dependencies or references"  
            echo "3. Invalid metadata or configuration"
            echo "4. Insufficient permissions"
            echo ""
            exit 1
          fi
          
          if [ "$numFailures" -gt 0 ]; then
            echo ""
            echo "🚨 TESTS FAILED"
            exit 1
          fi
          
          echo ""
          echo "✅ All validations passed successfully!"

      - name: Send comprehensive error analysis to LLM on failure
        if: failure()
        run: |
          echo "=== PREPARING COMPREHENSIVE ERROR ANALYSIS ==="
          
          # Create a comprehensive error report
          ERROR_REPORT=$(cat << 'EOF'
          {
            "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "repository": "'${{ github.repository }}'",
            "pull_request": "'${{ github.event.pull_request.number }}'",
            "commit_sha": "'${{ github.sha }}'",
            "workflow_run_id": "'${{ github.run_id }}'",
            "salesforce_org": "'${{ secrets.SF_ORG_URL }}'",
            "deployment_result": null,
            "project_structure": null,
            "error_summary": ""
          }
          EOF
          )
          
          # Add deployment result to report
          DEPLOYMENT_JSON=$(cat test-results/deploy-validation.json | jq -c .)
          ERROR_REPORT=$(echo "$ERROR_REPORT" | jq --argjson deploy "$DEPLOYMENT_JSON" '.deployment_result = $deploy')
          
          # Add project structure
          PROJECT_STRUCTURE=$(find . -name "*.cls" -o -name "*.trigger" -o -name "*.xml" | head -20 | jq -R . | jq -s .)
          ERROR_REPORT=$(echo "$ERROR_REPORT" | jq --argjson structure "$PROJECT_STRUCTURE" '.project_structure = $structure')
          
          # Generate error summary
          SUMMARY="Salesforce deployment validation failed. "
          if jq -e '.deployment_result.result.details.componentFailures[]?' <<< "$ERROR_REPORT" >/dev/null; then
            SUMMARY+="Found compilation errors in components. "
          fi
          if jq -e '.deployment_result.result.details.runTestResult.failures[]?' <<< "$ERROR_REPORT" >/dev/null; then
            SUMMARY+="Found test failures. "
          fi
          if [ "$(jq -r '.deployment_result.result.details.runTestResult.numTestsRun // 0' <<< "$ERROR_REPORT")" = "0" ]; then
            SUMMARY+="No tests were executed (likely due to compilation errors). "
          fi
          
          ERROR_REPORT=$(echo "$ERROR_REPORT" | jq --arg summary "$SUMMARY" '.error_summary = $summary')
          
          echo "=== SENDING TO LLM SERVER ==="
          echo "$ERROR_REPORT" | jq .
          
          # Send to your analysis server
          RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST https://c08b-203-129-200-122.ngrok-free.app/agents/cirus/analyze \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -d "$ERROR_REPORT" || echo "CURL_FAILED")
          
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1 | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '$ d')
          
          echo ""
          echo "=== LLM ANALYSIS RESPONSE (HTTP $HTTP_STATUS) ==="
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "$RESPONSE_BODY" | jq -r '.analysis // .message // .' 2>/dev/null || echo "$RESPONSE_BODY"
          else
            echo "❌ Failed to get analysis from LLM server"
            echo "Response: $RESPONSE_BODY"
          fi
          
          # Also create a simple summary for GitHub
          echo ""
          echo "=== QUICK ERROR SUMMARY FOR DEVELOPERS ==="
          if jq -e '.result.details.componentFailures[]?' test-results/deploy-validation.json >/dev/null; then
            echo "🚨 COMPILATION ERRORS FOUND:"
            jq -r '.result.details.componentFailures[]? | "  • " + .fullName + ": " + .problem' test-results/deploy-validation.json
          fi
          
          if jq -e '.result.details.runTestResult.failures[]?' test-results/deploy-validation.json >/dev/null; then
            echo "🚨 TEST FAILURES FOUND:"
            jq -r '.result.details.runTestResult.failures[]? | "  • " + .name + ": " + .message' test-results/deploy-validation.json
          fi
          
          if [ "$(jq -r '.result.details.runTestResult.numTestsRun // 0' test-results/deploy-validation.json)" = "0" ]; then
            echo "⚠️  NO TESTS EXECUTED - Check for compilation errors above"
          fi

      - name: Upload test results as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: salesforce-test-results
          path: test-results/
          retention-days: 30
